package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;


@Autonomous(name="auto", group="test")
public class auto extends OpMode {

    public DcMotor leftFront;
    public DcMotor leftBack;
    public DcMotor rightFront;
    public DcMotor rightBack;
    private double drivePower = 1;
    private int targetPower = 5500;




    @Override
    public void init() {


        leftFront = hardwareMap.dcMotor.get("LeftFront");
        leftBack = hardwareMap.dcMotor.get("LeftBack");
        rightFront = hardwareMap.dcMotor.get("RightFront");
        rightBack = hardwareMap.dcMotor.get("RightBack");

        leftFront.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBack.setDirection(DcMotorSimple.Direction.REVERSE);

        rightFront.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightBack.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftFront.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftBack.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        rightBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);


    }
    @Override
    public void start() {
        //goes forward
        leftBack.setTargetPosition(targetPower);
        leftFront.setTargetPosition(targetPower);
        rightBack.setTargetPosition(targetPower);
        rightFront.setTargetPosition(targetPower);
        //replace the rightfront encoder wire
        leftBack.setPower(drivePower);
        leftFront.setPower(drivePower);
        rightBack.setPower(drivePower);
        rightFront.setPower(drivePower);



        //sends telemetry data of motor power for debugging

        telemetry.addData("Left Back power", leftBack.getPower());
        telemetry.addData("Left Front power", leftFront.getPower());
        telemetry.addData("Right Back power", rightBack.getPower());
        telemetry.addData("Right Front power", rightFront.getPower());

        telemetry.addData("Left Back tar position", leftBack.getTargetPosition());
        telemetry.addData("Left Front tar position", leftFront.getTargetPosition());
        telemetry.addData("Right Back tar position", rightBack.getTargetPosition());
        telemetry.addData("Right Front tar position", rightFront.getTargetPosition());


        telemetry.addData("Left Back position", leftBack.getCurrentPosition());
        telemetry.addData("Left Front position", leftFront.getCurrentPosition());
        telemetry.addData("Right Back position", rightBack.getCurrentPosition());
        telemetry.addData("Right Front position", rightFront.getCurrentPosition());
        telemetry.update();

    /*
        leftBack.setTargetPosition(1000);
        leftFront.setTargetPosition(1000);
        rightBack.setTargetPosition(1000);
        rightFront.setTargetPosition(1000);

        leftBack.setPower(drivePower);
        leftFront.setPower(drivePower);
        rightBack.setPower(-drivePower);
        rightFront.setPower(-drivePower);

        telemetry.addData("Left Back power", leftBack.getPower());
        telemetry.addData("Left Front power", leftFront.getPower());
        telemetry.addData("Right Back power", rightBack.getPower());
        telemetry.addData("Right Front power", rightFront.getPower());
        telemetry.update();


        leftBack.setTargetPosition(1000);
        leftFront.setTargetPosition(1000);
        rightBack.setTargetPosition(1000);
        rightFront.setTargetPosition(1000);
        //
        leftBack.setPower(drivePower);
        leftFront.setPower(drivePower);
        rightBack.setPower(-drivePower);
        rightFront.setPower(-drivePower);

        telemetry.addData("Left Back power", leftBack.getPower());
        telemetry.addData("Left Front power", leftFront.getPower());
        telemetry.addData("Right Back power", rightBack.getPower());
        telemetry.addData("Right Front power", rightFront.getPower());
        telemetry.update();

*/


    }
    @Override
    public void loop() {
        telemetry.addData("Left Back power", leftBack.getPower());
        telemetry.addData("Left Front power", leftFront.getPower());
        telemetry.addData("Right Back power", rightBack.getPower());
        telemetry.addData("Right Front power", rightFront.getPower());

        telemetry.addData("Left Back tar position", leftBack.getTargetPosition());
        telemetry.addData("Left Front tar position", leftFront.getTargetPosition());
        telemetry.addData("Right Back tar position", rightBack.getTargetPosition());
        telemetry.addData("Right Front tar position", rightFront.getTargetPosition());


        telemetry.addData("Left Back position", leftBack.getCurrentPosition());
        telemetry.addData("Left Front position", leftFront.getCurrentPosition());
        telemetry.addData("Right Back position", rightBack.getCurrentPosition());
        telemetry.addData("Right Front position", rightFront.getCurrentPosition());
        telemetry.update();
    }
    @Override
    public void stop() {

    }

}
